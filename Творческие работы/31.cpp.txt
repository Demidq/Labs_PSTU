#include <glut.h>
#include <iostream>
#include <vector>
#include <string>



int value=0;
using namespace std;
int windh, windw; // window height and width
int c = 0;
vector <int> vec{ 1,2,3,4,6,5 };
vector <int> X{ 0,-1000,-1500,300,800,-80 };
vector <int> Y{ 0,-500,-1000,-1300,-500,-600 };
string res= "0";

class sv {

public:
    int mass[6]{ 0,0,0,0,0,0 };
    sv(int k1, int c1, int k2, int c2, int k3, int c3) {
        mass[k1] = c1;
        mass[k2] = c2;
        mass[k3] = c3;

    }
};
vector <sv> way;
vector <int> v{ rand() % 20+11,rand() % 20 + 10,rand() % 10 + 1,rand() % 20 + 12,rand() % 20 + 12,rand() % 20 + 11,rand() % 20 + 11,rand() % 20 + 11, };

//Просто рисует число и окружность
void draw(int k, int x, int y) {

    glPushMatrix();
    glTranslated(x, y, 0);
    glutWireSphere(150, 20, 10);
    glTranslated(-70, -40, 0.0);
    string t = to_string(k);
    for (auto c1 = t.begin(); c1 != t.end(); ++c1)
    {
        glutStrokeCharacter(GLUT_STROKE_ROMAN, *c1);
    }
    glPopMatrix();
}
///Нажатие клавиши
void TRKey(unsigned char k, int a, int b) {
    if (res[0] == '0') { res.pop_back(); }
    res.push_back(k);
}
///
void drawnum(int c, int x, int y) {
    glPushMatrix();
    glTranslated(x, y, 0);

    string t = to_string(c);
    for (auto c1 = t.begin(); c1 != t.end(); ++c1)
    {
        glutStrokeCharacter(GLUT_STROKE_ROMAN, *c1);
    }
    glPopMatrix();
}

void drawin(string c,int x,int y) {
    glPushMatrix();
    glTranslated(x, y, 0);
    glScalef(0.8f, 0.8f, 0.8f);
    
    for (auto c1 = c.begin(); c1 != c.end(); ++c1)
    {
        glutStrokeCharacter(GLUT_STROKE_ROMAN, *c1);
    }
    glPopMatrix();




}
//Результат
void drawres(string k, int x, int y) {

    glPushMatrix();
    glTranslated(x, y, 0);
    glTranslated(200, 80, 0.0);
    string t = k;
    if (res[0] == '0') { t = "_ _"; }
   
    for (auto c1 = t.begin(); c1 != t.end(); ++c1)
    {
        glutStrokeCharacter(GLUT_STROKE_ROMAN, *c1);
    }
    glPopMatrix();
}






//риусую линию
void drawline(int x, int y, int x1, int y1) {
    glBegin(GL_LINES);
    if ((x > x1) && (y > y1)) { glVertex3f(x - 150, y, 0); glVertex3f(x1 + 150, y1, 0); }
    if ((x > x1) && (y < y1)) { glVertex3f(x, y + 150, 0); ; glVertex3f(x1 + 150, y1, 0); }
    if ((x < x1) && (y > y1)) { glVertex3f(x + 150, y, 0); ; glVertex3f(x1, y1 + 150, 0); }
    if ((x < x1) && (y < y1)) { glVertex3f(x + 150, y, 0); ; glVertex3f(x1, y1 - 150, 0); }
    glEnd();
}

//область рисования
void reshape(int wid, int ht)
{
    gluOrtho2D(-wid / 2, wid / 2, -ht / 2, ht / 2);
    windw = wid;
    windh = ht;
    
}


void redraw(void)
{
   
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    //начало откуда рисует
    glPushMatrix();
    glTranslated(0, windh / 3, 0);
    glScalef(0.3f, 0.3f, 0.3f);
    glColor3d(0, 0.1, 1);
    glLineWidth(5);
    for (int k = 0; k < vec.size(); k++) {
        draw(vec[k], X[k], Y[k]);
    }
    for (int k = 0; k < vec.size() - 1; k++) {
        drawline(X[k], Y[k], X[k + 1], Y[k + 1]);

    }
    ///Нарисуем линии
    drawline(X[4], Y[4], X[0], Y[0]);
    drawline(X[5], Y[5], X[1], Y[1]);
    drawline(X[3], Y[3], X[5], Y[5]);
    //нарисуем расстояния
    glLineWidth(2); glColor3d(0, 1, 1);
    drawnum(v[0], -600, -200); drawnum(v[2], -1400, -700); drawnum(v[1], 500, -170);
    drawnum(v[5], -400, -400); drawnum(v[6], 320, -450); drawnum(v[3], 700, -1000);
    drawnum(v[4], -750, -1000); drawnum(v[7], 80, -1000);
    //нарисуем результат

    drawres(res, 1300, -1780);

    if (stoi(res)== way[0].mass[3]) {
        glPushMatrix();
        glTranslated(1500, -40, 0.0);
        glColor3d(0, 1, 0);
        string h = "BepHo!";
        for (auto c1 = h.begin(); c1 != h.end(); ++c1)
        {
            glutStrokeCharacter(GLUT_STROKE_ROMAN, *c1);
        }
        glPopMatrix();
    }
    else {
        if(res.size()>1){
            glPushMatrix();
            glTranslated(1500, -40, 0.0);
            glColor3d(1, 0, 0);
            string h = "HE BepHo!";
            for (auto c1 = h.begin(); c1 != h.end(); ++c1)
            {
                glutStrokeCharacter(GLUT_STROKE_ROMAN, *c1);
            }
            glPopMatrix();
        }
    }
    
    drawin("Kakoe MuHuMalHoe paccTo9Hue Do To4ku 4? BBeDuTe 3Ha4eHue", -2200, -1700);

    glPopMatrix();
   
    glutSwapBuffers();

}


int main(int argc, char* argv[])
{
    
    
    setlocale(LC_ALL, "rus");
    windw = 1600;
    windh = 900;
    way.push_back(*new sv(1, v[0], 5, v[1], 0, 0));
    way.push_back(*new sv(0, v[0], 4, v[5], 2, v[2]));
    way.push_back(*new sv(1, v[2], 3, v[4], 0, 0));
    way.push_back(*new sv(2, v[4], 4, v[7], 5, v[3]));
    way.push_back(*new sv(1, v[5], 3, v[7], 5, v[6]));
    way.push_back(*new sv(3, v[3], 0, v[1], 4, v[6]));
    

    for (int k = 1; k < 6; k++) {
        for (int k1 = 0; k1 < 6; k1++) {
            if ((way[k].mass[k1] != 0) && (way[0].mass[k1] != 0) && ((way[0].mass[k] + way[k].mass[k1]) < way[0].mass[k1])) {
                way[0].mass[k1] = way[k].mass[k1] + way[0].mass[k];
            }

            if ((way[k].mass[k1] != 0) && (way[0].mass[k1] == 0)) { way[0].mass[k1] = way[k].mass[k1] + way[0].mass[k]; }
        }

    }

    glutInit(&argc, argv);
    glutInitWindowSize(windw, windh);
    glutInitWindowPosition(0, 0);
    glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);

    (void)glutCreateWindow("31");
    glutReshapeFunc(reshape);
    glutDisplayFunc(redraw);

    glClearColor(0, 0, 0, 1.0f);



    cout << "От точки 1 наименьшие пути:\n";
    for (int k = 1; k < 6; k++) {
        cout << "До точки " << k + 1 << " = " << way[0].mass[k] << endl;

    }
    glutKeyboardFunc(TRKey);
    glutMainLoop();
    
    return 0;
}


