/*Класс- контейнер ВЕКТОР с элементами типа int.

Реализовать операции:
[] – доступа по индексу;
int() – определение размера вектора;
- n- удаляет n элементов из конца вектора
+ n - добавляет n элементов в конец вектора.
Исключительные ситуации генерируются:

в конструкторе с параметром при попытке создать вектор больше максимального размера;
в операции [] – при попытке обратиться к элементу с номером меньше 0 или больше текущего размера вектора;
в операции + – при попытке добавить элемент с номером больше максимального размера;
в операции – при попытке удалить элемент из пустого вектора.
*/


#include <iostream>
#include <vector>
using namespace std;
class vec {
private:
	vector <int> v;

public:
		vec(){
			for (int k = 0; k < 10; k++) {
				v.reserve(10);
				v.push_back(rand() % 10);
			}
			cout <<"Максимальный размер вектора = 10"<<endl;
			}



	void operator [](int index) {
		if ((index<0)||(index>v.capacity())) {
			throw ("Такого элемента не существует!\n");
		}
		cout <<"Элемент под индексом ["<<index<<"] = "<<v[index] << endl;
	}

	void operator -(int n) {
		if (n>v.capacity()) { throw ("Количество элментов для удаления больше допустимого!"); }
		while (n != 0) { v.pop_back(); n--; }
		cout << "Элементы удалены!\n";
	}

	void operator +(int n) {
		
		while (n != 0) {
			if (v.size() + n > v.capacity()) {
				throw ("Кол-во элементов для добавления больше допустимого!\n");
		}
			v.push_back(rand() % 10); n--; }
		cout << "Элементы добавлены!\n";
	}

	void print() {
		for (int k = 0; k < v.size(); k++) {
			cout << v[k] << " ";
		}cout << endl;
	}

	void raz() {
		cout << "Размер вектора = " << v.size() << endl;
	}

};


int main() {
	setlocale(LC_ALL, "rus");
	int n = 20; cout << "Кол-во элементов для добавления или удаления = " << n << endl;
	vec w; w.print();
	try
	{
		 w[-1];
	}
	catch (const char* ex)
	{
		cout<<"Возникла ошибка!\n"<<ex; cout << endl;
	}
	 w.print();
	try
	{
		w + n;
	}
	catch (const char* ex)
	{
		cout << "Возникла ошибка!\n" << ex; cout << endl;
	}
	try
	{
		w - n;
	}
	catch (const char* ex)
	{
		cout << "Возникла ошибка!\n" << ex; cout << endl;
	}
	
	



}